ARG ARCH
ARG OPENCV_VERSION
ARG CUDA_VERSION
ARG UBUNTU_VERSION_NUMBER
FROM roflcoopter/${ARCH}-opencv:${OPENCV_VERSION} as opencv
FROM nvidia/cuda:${CUDA_VERSION}-cudnn9-devel-ubuntu${UBUNTU_VERSION_NUMBER} AS build

COPY --from=opencv /opt/opencv /opt/opencv/

ARG MAKEFLAGS="-j2"
ARG DARKNET_COMMIT

ENV \
  DEBIAN_FRONTEND=noninteractive \
  NVIDIA_DRIVER_CAPABILITIES=all \
  NVIDIA_VISIBLE_DEVICES=0 \
  PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/opencv/lib/pkgconfig \
  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opencv/lib

RUN buildDeps="autoconf \
  pkg-config \
  automake \
  ca-certificates \
  wget \
  cmake \
  g++ \
  gcc \
  git \
  libopenblas-dev \
  liblapack-dev \
  libtbb-dev \
  libpng16-16 \
  make \
  python3-dev \
  python3-pip \
  python3-setuptools \
  python3-wheel" && \
  apt-get -yqq update && \
  apt-get install -yq --no-install-recommends ${buildDeps}

ARG UBUNTU_VERSION_NUMBER

## Install OpenVINO
ARG OPENVINO_VERSION
RUN \
  UBUNTU_YEAR=$(echo $UBUNTU_VERSION_NUMBER | cut -d'.' -f1) && \
  OPENVINO_YEAR=$(echo $OPENVINO_VERSION | cut -d'.' -f1) && \
  echo "deb https://apt.repos.intel.com/openvino/${OPENVINO_YEAR} ubuntu${UBUNTU_YEAR} main" | tee /etc/apt/sources.list.d/intel-openvino-${OPENVINO_YEAR}.list && \
  wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
  apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB  && \
  apt-get update && apt-get install -y --no-install-recommends openvino-${OPENVINO_VERSION}

# Compile Darknet
RUN \
  DIR=/tmp && mkdir -p ${DIR} && cd ${DIR} && \
  git clone https://github.com/AlexeyAB/darknet.git && \
  cd darknet && \
  git checkout ${DARKNET_COMMIT} && \
  sed -i -e 's/GPU=0/GPU=1/' Makefile && \
  sed -i -e 's/CUDNN=0/CUDNN=1/' Makefile && \
  sed -i -e 's/OPENCV=0/OPENCV=1/' Makefile && \
  sed -i -e 's/LIBSO=0/LIBSO=1/' Makefile && \
  sed -i 's|fprintf(stderr|fprintf(stdout|' \
  src/convolutional_layer.c \
  src/maxpool_layer.c \
  src/parser.c \
  src/route_layer.c \
  src/shortcut_layer.c \
  src/upsample_layer.c \
  src/yolo_layer.c && \
  sed -i 's|fprintf(stderr, "|fprintf(stdout, "ERRORLOG|' src/*.c && \
  make && \
  # Compile Darknet with CUDNN_HALF
  sed -i -e 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile && \
  sed -i -e 's/LIBNAMESO=libdarknet.so/LIBNAMESO=libdarknet_half.so/' Makefile && \
  make

FROM scratch

COPY --from=build /tmp/darknet/libdarknet.so /darknet/lib/libdarknet.so
COPY --from=build /tmp/darknet/libdarknet_half.so /darknet/lib/libdarknet_half.so

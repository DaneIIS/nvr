{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run Viseron",
      "type": "shell",
      "command": "python3 -u -m viseron",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Pytest",
      "type": "shell",
      "command": "pytest tests/",
      "dependsOn": [
        "Install all Requirements",
        "Install all Test Requirements"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Pylint",
      "type": "shell",
      "command": "pylint viseron",
      "dependsOn": [
        "Install all Requirements",
        "Install all Test Requirements"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Pytest Code Coverage",
      "type": "shell",
      "command": "pytest tests/ --cov=viseron/ --cov-report term-missing --durations-min=1 --durations=0",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Install all Requirements",
      "detail": "Install all requirements in requirements.txt",
      "type": "shell",
      "command": "python3 -m pip install -r requirements.txt",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Install all Test Requirements",
      "detail": "Install all requirements in requirements_test.txt",
      "type": "shell",
      "command": "python3 -m pip install -r requirements_test.txt",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Generate database migration",
      "detail": "Generates a new revision file for the database.",
      "type": "shell",
      "command": "alembic revision --autogenerate -m '${input:revision_message}'",
      "options": {
        "cwd": "${workspaceFolder}/viseron/components/storage"
      },
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    // Frontend tasks
    {
      "label": "Frontend: Build",
      "type": "shell",
      "command": "npm run build",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Start",
      "type": "shell",
      "command": "npm run start",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Vitest",
      "type": "shell",
      "command": "npm run test",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Vitest Code Coverage",
      "type": "shell",
      "command": "npm run test:coverage",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Lint",
      "type": "shell",
      "command": "npm run lint",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Format",
      "type": "shell",
      "command": "npm run format",
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    // Docs tasks
    {
      "label": "Docs: Build",
      "type": "shell",
      "command": "npm run build",
      "options": {
        "cwd": "${workspaceFolder}/docs"
      },
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Start",
      "type": "shell",
      "command": "npm run start",
      "options": {
        "cwd": "${workspaceFolder}/docs"
      },
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Lint",
      "type": "shell",
      "command": "npm run lint",
      "options": {
        "cwd": "${workspaceFolder}/docs"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Format",
      "type": "shell",
      "command": "npm run format",
      "options": {
        "cwd": "${workspaceFolder}/docs"
      },
      "group": {
        "kind": "test"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Generate Component Docs",
      "type": "shell",
      "command": "python3 -m scripts.gen_docs -c ${input:component}",
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Generate Component Docs for All Components",
      "type": "shell",
      "command": "python3 -m scripts.gen_docs -a",
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "component",
      "type": "promptString",
      "description": "The component to generate docs for"
    },
    {
      "id": "revision_message",
      "type": "promptString",
      "description": "Revision message (should end with a period)"
    }
  ]
}
